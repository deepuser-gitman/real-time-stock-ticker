version: '3.8'

networks:
  app-network:
    driver: bridge

services:
  kafka:
    image: 'bitnami/kafka:3.6.0'
    ports:
      - '9092:9092'
      - '9094:9094'
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - app-network
    volumes:
      - './data/kafka/data:/bitnami/kafka/data'
      - './data/kafka/logs:/bitnami/kafka/logs'

  mongodb:
    image: 'bitnami/mongodb:7.0.3'
    ports:
      - '27017:27017'
    environment:
      - MONGODB_USERNAME=${MONGODB_USERNAME:-mongo_user}
      - MONGODB_PASSWORD=${MONGODB_PASSWORD:-mongo_pass}
      - MONGODB_DATABASE=${MONGODB_DATABASE:-stock}
      - MONGODB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD:-mongo_root_pass}
    networks:
      - app-network
    volumes:
      - './data/mongodb/data:/bitnami/mongodb/data'
      - './data/mongodb/logs:/bitnami/mongodb/logs'

  redis:
    image: 'bitnami/redis:6.2.14'
    ports:
      - '6379:6379'
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_pass}
    networks:
      - app-network
    volumes:
      - './data/redis/data:/bitnami/redis/data'
      - './data/redis/logs:/bitnami/redis/logs'

  app_stock_syncer:
    build:
      context: ./stock_syncer
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - FINNHUB_API_KEY=${FINNHUB_API_KEY}
    networks:
      - app-network
    restart: always
    depends_on:
      - kafka

  mongo_stock_syncer:
    build:
      context: ./sync_mongo
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
      - DB_URI=mongodb://mongo_user:mongo_pass@mongodb:27017/stock
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASS=redis_pass
    networks:
      - app-network
    restart: always
    depends_on:
      - kafka
      - mongodb
      - redis

  stock_api:
    build:
      context: ./stock_api
      dockerfile: Dockerfile
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - DB_URI=mongodb://mongo_user:mongo_pass@mongodb:27017/stock
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASS=redis_pass
    networks:
      - app-network
    restart: always
    depends_on:
      - redis
      - mongodb